{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","connect","a","initWeb3","initContract","web3","eth","getAccounts","accounts","console","log","account","setState","connected","fetchBalance","fetchMinterAccount","onReceiverChange","e","address","target","value","receiverAddress","onTransferAmountChange","amount","transferAmount","onMintReceiverChange","mintReceiverAddress","onMintAmountChange","mintAmount","onMint","contract","methods","mint","state","send","from","on","hash","txHash","status","action","receipt","onTransfer","minterAccount","ethBalance","balance","window","ethereum","enable","this","Web3","Contract","abi","initContractEvent","events","Sent","filter","to","fromBlock","event","balances","call","getBalance","utils","fromWei","minter","className","onClick","isMinter","React","Component","DAppInfo","type","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6434f97e.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3'\nimport './App.css';\nimport abi from './abi.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false, // 是否连接meta mask\n      account: '', // meta mask的以太坊账户\n      minterAccount: '', // 铸币者的以太坊账户\n      mintReceiverAddress: '', // 铸币的接收地址\n      mintAmount: '', // 铸币数量\n      ethBalance: 0, // 以太坊余额\n      balance: 0, // 币余额\n      txHash: '', // 广播的交易id\n      status: '', // 交易状态\n    }\n  }\n  componentDidMount() {\n\n  }\n\n  /**\n   * 初始化web3\n   */\n  async initWeb3 () {\n    console.log('window.ethereum', window.ethereum)\n    await window.ethereum.enable();\n    this.web3 = new Web3(window.ethereum);\n  }\n\n  /**\n   * 初始化合约\n   */\n  initContract () {\n    const contractAddress = '0xfa95506583310999dc823f45CaeD5faE3c2ED1b9';\n    const contract = new this.web3.eth.Contract(abi, contractAddress);\n    this.contract = contract;\n    this.initContractEvent();\n  }\n  // 监听转账事件，当监听到当前账户收到币后，刷新余额\n  initContractEvent () {\n    this.contract.events.Sent({\n      filter: {to: [this.state.account]},\n      fromBlock: 0\n    })\n      .on('data', (event) => {\n        this.fetchBalance(this.state.account)\n      });\n  }\n\n  /**\n   * 请求余额\n   */\n  async fetchBalance (account) {\n    const balance = await this.contract.methods.balances(account).call();\n    const ethBalance = await this.web3.eth.getBalance(account);\n    console.log('ethBalance', ethBalance)\n    this.setState({\n      balance,\n      ethBalance: Web3.utils.fromWei(ethBalance)\n    })\n  }\n\n  /**\n   * 请求铸币者地址\n   */\n  async fetchMinterAccount () {\n    const minterAccount = await this.contract.methods.minter().call();\n    this.setState({\n      minterAccount,\n    })\n  }\n  /**\n   * 连接Meta Mask的以太坊账户\n   * @returns {Promise<void>}\n   */\n  connect  = async () => {\n    await this.initWeb3();\n    this.initContract();\n\n    const accounts = await this.web3.eth.getAccounts();\n    console.log('accounts', accounts)\n    const account = accounts[0];\n    this.setState({\n      connected: true,\n      account: account\n    });\n    this.fetchBalance(account);\n    this.fetchMinterAccount();\n  }\n  /**\n   * 记录收款地址\n   * @param e\n   */\n  onReceiverChange = (e) =>{\n    const address = e.target.value;\n    this.setState({\n      receiverAddress: address\n    })\n  }\n  /**\n   * 记录转出数量\n   * @param e\n   */\n  onTransferAmountChange = (e) => {\n    const amount = e.target.value;\n    this.setState({\n      transferAmount: amount\n    })\n  }\n  /**\n   * 记录铸币数量\n   * @param e\n   */\n  onTransferAmountChange = (e) => {\n    const amount = e.target.value;\n    this.setState({\n      transferAmount: amount\n    })\n  }\n  /**\n   * 记录铸币的接收地址\n   * @param e\n   */\n  onMintReceiverChange = (e) =>{\n    const address = e.target.value;\n    this.setState({\n      mintReceiverAddress: address\n    })\n  }\n  /**\n   * 记录铸币数量\n   * @param e\n   */\n  onMintAmountChange = (e) => {\n    const amount = e.target.value;\n    this.setState({\n      mintAmount: amount\n    })\n  }\n  /**\n   * 铸币\n   */\n  onMint = () => {\n    // 在此调用合约方法mint\n    this.contract.methods.mint(this.state.mintReceiverAddress, this.state.mintAmount)\n      .send({\n        from: this.state.account\n      })\n      .on('transactionHash', (hash) => {\n        // 交易广播到节点，等待打包\n        this.setState({\n          txHash: hash,\n          status: 'pending',\n          action: '铸币',\n        });\n      })\n      .on('receipt', (receipt) => {\n        // 交易已被确认\n        this.setState({\n          status: 'confirmed',\n        });\n        // 刷新余额信息\n        this.fetchBalance(this.state.account);\n      });\n  }\n  /**\n   * 转账\n   */\n  onTransfer = () => {\n    // 在此调用合约方法send\n    this.contract.methods.send(this.state.receiverAddress, this.state.transferAmount)\n      .send({\n        from: this.state.account\n      })\n      .on('transactionHash', (hash) => {\n        // 交易广播到节点，等待打包\n        this.setState({\n          txHash: hash,\n          status: 'pending',\n          action: '转账',\n        });\n      })\n      .on('receipt', (receipt) => {\n        // 交易已被确认\n        this.setState({\n          status: 'confirmed',\n        });\n      });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          DApp Coin\n        </header>\n        {\n          !this.state.connected && <button onClick={this.connect} className={'connectBtn'}>Connect MetaMask</button>\n        }\n        {\n          this.state.connected && <DAppInfo\n            onTransfer={this.onTransfer}\n            onReceiverChange={this.onReceiverChange}\n            onTransferAmountChange={this.onTransferAmountChange}\n            onMint={this.onMint}\n            onMintReceiverChange={this.onMintReceiverChange}\n            onMintAmountChange={this.onMintAmountChange}\n            ethBalance={this.state.ethBalance}\n            balance={this.state.balance}\n            account={this.state.account}\n            action={this.state.action}\n            txHash={this.state.txHash}\n            status={this.state.status}\n            isMinter={this.state.minterAccount === this.state.account}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nclass DAppInfo extends React.Component {\n  render() {\n    return <div className={'infoContainer'}>\n      <div className={'infoItem'}>\n        <label>账户地址：</label>\n        <span>\n          {\n            this.props.account\n          }\n        </span>\n      </div>\n      <div className={'infoItem'}>\n        <label>ETH余额：</label>\n        <span>\n          {\n            this.props.ethBalance\n          }\n        </span>\n      </div>\n      <div className={'infoItem'}>\n        <label>Coin余额：</label>\n        <span>\n          {\n            this.props.balance\n          }\n        </span>\n      </div>\n      {\n        this.props.isMinter &&  <div className={'transferCon'}>\n          <h2>铸币</h2>\n          <div className={'transferItem'}>\n            <label>收币地址：</label>\n            <input type='text' onChange={this.props.onMintReceiverChange}/>\n          </div>\n          <div className={'transferItem'}>\n            <label>铸币数量：</label>\n            <input type='number' onChange={this.props.onMintAmountChange}/>\n          </div>\n          <button onClick={this.props.onMint}>确定铸币</button>\n        </div>\n      }\n      <div className={'transferCon'}>\n        <h2>转账</h2>\n        <div className={'transferItem'}>\n          <label>收款地址：</label>\n          <input type='text' onChange={this.props.onReceiverChange}/>\n        </div>\n        <div className={'transferItem'}>\n          <label>转出数额：</label>\n          <input type='number' onChange={this.props.onTransferAmountChange}/>\n        </div>\n        <button onClick={this.props.onTransfer}>确定转出</button>\n      </div>\n      {\n        this.props.txHash && <div>\n          <h2>记录</h2>\n          <div>\n            <label>交易动作：</label>\n            <span>\n            {\n              this.props.action\n            }\n          </span>\n          </div>\n          <div>\n            <label>交易哈希：</label>\n            <span>\n            {\n              this.props.txHash\n            }\n          </span>\n          </div>\n          <div>\n            <label>交易状态：</label>\n            <span>\n            {\n              this.props.status\n            }\n          </span>\n          </div>\n        </div>\n      }\n    </div>\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}